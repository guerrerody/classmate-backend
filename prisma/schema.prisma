// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

model User {
  id                    String         @id @default(auto()) @map("_id") @db.ObjectId
  email                 String         @unique
  name                  String
  notificationId        String?
  userName              String         @unique
  password              String
  verified              Boolean        @default(false)
  emailIsVerified       Boolean        @default(false)
  prefs                 Json?
  imageUri              String?
  birthday              DateTime?
  posts                 Post[]         @relation("User")
  rePosts               Post[]         @relation("RepostUser", fields: [rePostIds], references: [id])
  rePostIds             String[]       @db.ObjectId
  followingCount        BigInt?        @default(0)
  followersCount        BigInt?        @default(0)
  createdAt             DateTime       @default(now())
  updatedAt             DateTime       @updatedAt
  followers             User[]         @relation("UserFollows", fields: [followerIds], references: [id])
  followerIds           String[]       @db.ObjectId
  followings            User[]         @relation("UserFollows", fields: [followingIds], references: [id])
  followingIds          String[]       @db.ObjectId
  comments              Comment[]
  chats                 Chat[]         @relation(fields: [chatIds], references: [id])
  chatIds               String[]       @db.ObjectId
  likes                 Like[]
  messages              Message[]
  notifications         Notification[]
  notificationsReceived Notification[] @relation("NotificationUser")
}

model Post {
  id             String    @id @default(auto()) @map("_id") @db.ObjectId
  user           User?     @relation("User", fields: [userId], references: [id])
  userId         String?   @db.ObjectId
  repostUsers    User[]    @relation("RepostUser", fields: [repostUserIds], references: [id])
  repostUserIds  String[]  @db.ObjectId
  audioUri       String?
  audioTitle     String?
  videoUri       String?
  videoThumbnail String?
  comments       Comment[]
  videoTitle     String?
  photoUri       String[]
  postText       String?
  videoViews     BigInt?   @default(0)
  createdAt      DateTime? @default(now())
  updatedAt      DateTime? @updatedAt
  likes          Like[]
  link           Link?     @relation(fields: [linkId], references: [id])
  linkId         String?   @db.ObjectId
  photo          Image?    @relation(fields: [photoId], references: [id])
  photoId        String?   @db.ObjectId
}

model Like {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId    String   @db.ObjectId
  post      Post     @relation(fields: [postId], references: [id], onDelete: Cascade)
  postId    String   @db.ObjectId
  commentId String?  @db.ObjectId
  createdAt DateTime @default(now())
}

model Comment {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  comment   String
  user      User     @relation(fields: [userId], references: [id])
  userId    String   @db.ObjectId
  post      Post     @relation(fields: [postId], references: [id])
  postId    String   @db.ObjectId
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Chat {
  id         String    @id @default(auto()) @map("_id") @db.ObjectId
  messages   Message[]
  messageIds String[]  @db.ObjectId
  users      User[]    @relation(fields: [userIds], references: [id])
  userIds    String[]  @db.ObjectId
  createdAt  DateTime  @default(now())
  updatedAt  DateTime  @updatedAt
}

model Message {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  text      String?
  photoUri  String?
  photo     Image?   @relation(fields: [photoId], references: [id])
  photoId   String?  @db.ObjectId
  chat      Chat?    @relation(fields: [chatId], references: [id], onDelete: Cascade)
  chatId    String?  @db.ObjectId
  sender    User     @relation(fields: [senderId], references: [id], onDelete: Cascade)
  senderId  String   @db.ObjectId
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Notification {
  id          String           @id @default(auto()) @map("_id") @db.ObjectId
  text        String
  imageUri    String?
  to          String?
  type        NotificationType
  notifUser   User?            @relation("NotificationUser", fields: [notifUserId], references: [id])
  notifUserId String?          @db.ObjectId
  remindDate  DateTime?
  createdAt   DateTime         @default(now())
  updatedAt   DateTime         @updatedAt
  user        User?            @relation(fields: [userId], references: [id])
  userId      String?          @db.ObjectId
}

model Link {
  id          String  @id @default(auto()) @map("_id") @db.ObjectId
  url         String
  title       String?
  imageUri    String?
  imageHeight Int?
  imageWidth  Int?
  posts       Post[]
}

model Image {
  id          String    @id @default(auto()) @map("_id") @db.ObjectId
  imageUri    String?
  imageHeight Int?
  imageWidth  Int?
  posts       Post[]
  messages    Message[]
}

enum NotificationType {
  Follow
  Posts
  Suggestions
  Reminder
}
